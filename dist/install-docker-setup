#!/bin/sh

cd "$(dirname "$(command -v "$0")")" || exit 1

root_dir="$(realpath "$PWD/..")"

cd "$root_dir" || exit 1

exe/section "$0"

create_mounts()
{
    lsblk -n -r -o PATH | grep -E '/dev/sd[a-z]+[0-9]+' | while read -r device ; do
        directory="$(lsblk -n -r -o MOUNTPOINT "$device")"
        if [ "$directory" = '/' ] ; then
            continue
        fi

        size_unit="$(lsblk -n -r -o SIZE "$device" | rev | cut -c 1)"
        if [ "$size_unit" = 'B' ] ; then
            continue
        fi
        if [ "$size_unit" = 'K' ] ; then
            continue
        fi
        if [ "$size_unit" = 'M' ] ; then
            continue
        fi

        removable="$(lsblk -n -r -o RM "$device")"
        if [ "$removable" = '1' ] ; then
            continue
        fi

        uuid="$(blkid "$device" | grep -o 'UUID=".*"' | cut -d '"' -f 2)"
        dest="/mnt/$uuid"

        lib/mkdir-sudo "$0" "$dest"
        lib/mount "$0" "$device" "$dest"
    done
}

update_config()
{
    for directory in /mnt/* ; do
        docker_directory="$directory/DOCKER"
        if [ -d "$docker_directory" ] ; then
            lib/fwrite-multiline-sudo "$0" "$(printf "{\n    \"data-root\": \"%s\"\n}\n" "$docker_directory")" '/etc/docker/daemon.json'
        fi
    done
}

remove_mounts()
{
    lsblk -n -r -o PATH | grep -E '/dev/sd[a-z]+[0-9]+' | while read -r device ; do
        directory="$(lsblk -n -r -o MOUNTPOINT "$device")"
        if [ "$directory" = '/' ] ; then
            continue
        fi

        size_unit="$(lsblk -n -r -o SIZE "$device" | rev | cut -c 1)"
        if [ "$size_unit" = 'B' ] ; then
            continue
        fi
        if [ "$size_unit" = 'K' ] ; then
            continue
        fi
        if [ "$size_unit" = 'M' ] ; then
            continue
        fi

        removable="$(lsblk -n -r -o RM "$device")"
        if [ "$removable" = '1' ] ; then
            continue
        fi

        uuid="$(blkid "$device" | grep -o 'UUID=".*"' | cut -d '"' -f 2)"
        dest="/mnt/$uuid"

        lib/umount "$0" "$device"
        lib/rm-sudo "$0" "$dest"
    done
}

create_mounts
update_config
remove_mounts
